name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Scripts on ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        python-version: [3.8, 3.9, 3.10]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install black ruff pytest
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Make scripts executable
      run: |
        chmod +x src/installers/rhel/qradar_rhel_installer.sh
        chmod +x src/installers/debian/qradar_debian_installer.sh
        chmod +x src/installers/ubuntu/qradar_ubuntu_installer.sh
        chmod +x src/installers/universal/qradar_universal_installer.sh
        chmod +x src/helpers/execve_parser.py

    - name: Run Linters
      run: |
        black --check .
        ruff check .

    - name: Test Bash Script Syntax
      run: |
        echo "üîç Testing Bash script syntax..."
        shellcheck src/installers/rhel/qradar_rhel_installer.sh
        shellcheck src/installers/debian/qradar_debian_installer.sh
        shellcheck src/installers/ubuntu/qradar_ubuntu_installer.sh
        shellcheck src/installers/universal/qradar_universal_installer.sh
        echo "‚úÖ Bash script syntax check passed"

    - name: Test Python Script Syntax
      run: |
        echo "üîç Testing Python script syntax..."
        python3 -m py_compile src/helpers/execve_parser.py
        echo "‚úÖ Python script syntax check passed"

    - name: Run Python Script Tests
      run: |
        echo "üß™ Running Python script functionality tests..."
        pytest tests/
        echo "‚úÖ Python script functionality tests passed"

    - name: Validate File Structure
      run: |
        echo "üìÅ Validating file structure..."

        # Check required files exist
        files=(
          "src/installers/universal/qradar_universal_installer.sh"
          "src/helpers/execve_parser.py"
          "docs/README.md"
          "docs/CHANGELOG.md"
          "docs/LICENSE"
          ".gitignore"
        )

        for file in "${files[@]}"; do
          if [[ -f "$file" ]]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file is missing"
            exit 1
          fi
        done

        # Check script permissions
        scripts=(
          "src/installers/rhel/qradar_rhel_installer.sh"
          "src/installers/debian/qradar_debian_installer.sh"
          "src/installers/ubuntu/qradar_ubuntu_installer.sh"
          "src/installers/universal/qradar_universal_installer.sh"
          "src/helpers/execve_parser.py"
        )

        for script in "${scripts[@]}"; do
            if [[ -x "$script" ]]; then
                echo "‚úÖ $script is executable"
            else
                echo "‚ùå $script is not executable"
                exit 1
            fi
        done

    - name: Validate Documentation
      run: |
        echo "üìñ Validating documentation..."

        # Check if README contains required sections
        required_sections=(
          "Features"
          "Prerequisites"
          "Installation"
          "Usage"
          "Testing"
          "Troubleshooting"
        )

        for section in "${required_sections[@]}"; do
          if grep -q "$section" docs/README.md; then
            echo "‚úÖ README contains $section section"
          else
            echo "‚ö†Ô∏è README missing $section section"
          fi
        done

        # Check CHANGELOG format
        if grep -q "## \\[.*\] - [0-9]" docs/CHANGELOG.md; then
          echo "‚úÖ CHANGELOG follows proper format"
        else
          echo "‚ö†Ô∏è CHANGELOG format may need improvement"
        fi

    - name: Security Check
      run: |
        echo "üîí Running basic security checks..."

        # Check for hardcoded credentials (basic patterns)
        if grep -r -i "password\|secret\|token\|key" --include="*.sh" --include="*.py" . | grep -v "README\|CHANGELOG\|LICENSE\|test\|example"; then
          echo "‚ö†Ô∏è Potential hardcoded credentials found (manual review needed)"
        else
          echo "‚úÖ No obvious hardcoded credentials detected"
        fi

        # Check file permissions in git (stored permissions)
        echo "üìã File permissions check:"
        ls -la src/installers/universal/qradar_universal_installer.sh src/helpers/execve_parser.py

    - name: Run installer in Docker
      strategy:
        matrix:
          distro: [rockylinux:9, centos:7, almalinux:8]
      run: |
        docker run --rm -v ${{ github.workspace }}:/app -w /app -e CI=true ${{ matrix.distro }} bash -c "
          yum install -y rsyslog audit python3 &&
          /app/src/installers/rhel/qradar_rhel_installer.sh 127.0.0.1 514 --dry-run &&
          grep 'target=\"127.0.0.1\"' /etc/rsyslog.d/99-qradar.conf"

    - name: Relocate installer log
      if: always()
      run: |
        sudo mv qradar_rhel_setup.log $RUNNER_TEMP/ || true
        sudo chown $USER:$USER $RUNNER_TEMP/qradar_rhel_setup.log || true

    - name: Upload installer log
      uses: actions/upload-artifact@v4
      with:
        name: installer-log-${{ matrix.distro }}
        path: ${{ runner.temp }}/qradar_rhel_setup.log

    - name: Test Summary
      if: always()
      run: |
        if [[ ${{ job.status }} == 'success' ]]; then
          echo "‚úÖ All tests passed!"
        else
          echo "‚ùå Some tests failed."
          exit 1
        fi